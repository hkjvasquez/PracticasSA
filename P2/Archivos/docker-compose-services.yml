version: '3.8'
services:
  consulta_empleado:
    build:
      context: ./consulta-empleado
      dockerfile: Dockerfile
    container_name: consulta-empleado
    restart: always
    ports:
      - "3001:3001"  # Exponemos el puerto 3000 del contenedor al host
    depends_on:
      - db  # Asegura que el contenedor de la base de datos se inicie antes que la aplicaci√≥n
    env_file:
      - mysql.env  # Referencia al archivo mysql.env para las credenciales
    networks:
      - red_servicios  # Asignar el contenedor a la red personalizada
    
  insert-empleado:
    build:
      context: ./insert-empleado
      dockerfile: Dockerfile
    container_name: insert-empleado
    restart: always
    ports:
      - "3002:3002"  # Exponemos el puerto 3000 del contenedor al host
    depends_on:
      - db
    env_file:
      - mysql.env  # Referencia al archivo mysql.env para las credenciales
    networks:
      - red_servicios  # Asignar el contenedor a la red personalizada

  update-empleado:
    build:
      context: ./update-empleado
      dockerfile: Dockerfile
    container_name: update-empleado
    restart: always
    ports:
      - "3003:3003"  # Exponemos el puerto 3000 del contenedor al host
    depends_on:
      - db
    env_file:
      - mysql.env  # Referencia al archivo mysql.env para las credenciales
    networks:
      - red_servicios  # Asignar el contenedor a la red personalizada

  gestion_empleados:
    build:
      context: ./gestion-empleados
      dockerfile: Dockerfile
    container_name: gestion-empleados
    restart: always
    ports:
      - "3004:3004"  # Exponemos el puerto 3000 del contenedor al host
    depends_on:
      - db
    env_file:
      - mysql.env  # Referencia al archivo mysql.env para las credenciales
    networks:
      - red_servicios  # Asignar el contenedor a la red personalizada

            
volumes:
  mysql_data:

networks:
  red_servicios:
    driver: bridge  # Puedes usar el driver de red predeterminado